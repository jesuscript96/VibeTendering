# cloudbuild.yaml
steps:
  # 1. Construir la imagen de Docker
  # Le decimos a Docker que construya la imagen usando el Dockerfile en el directorio actual (.)
  # y la etiquete con el nombre completo que usaremos en Artifact Registry.
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}:latest', '.']

  # 2. Subir la imagen construida a Google Artifact Registry
  # Artifact Registry es el lugar moderno para almacenar tus imágenes de Docker en GCP.
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}:latest']

  # 3. Desplegar la imagen en Cloud Run
  # Usamos el comando 'gcloud run deploy' para tomar la imagen que acabamos de subir
  # y desplegarla como un nuevo servicio o una nueva revisión de un servicio existente.
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME}' # El nombre de tu servicio en Cloud Run
      - '--image=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}:latest'
      - '--region=${_REGION}'
      - '--platform=managed'
      - '--allow-unauthenticated' # Permite que cualquiera pueda acceder a la URL

# Guardamos la imagen en Artifact Registry para poder usarla en el paso de despliegue
images:
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}:latest'
